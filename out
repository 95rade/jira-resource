#!/bin/bash

get_text() {
    # Get text and text file path
    text=$(jq "(.params.${1} // \"\${FILE_CONTENT}\")" < "${payload}")
    text_file=$(jq -r ".params.$1_file // \"\"" < "${payload}")

    # Get text file content
    FILE_CONTENT=""
    if [[ -n ${text_file} ]]
    then
        if [[ -f ${text_file} ]]
        then
            FILE_CONTENT="$(cat "${text_file}")"

            [[ -z ${FILE_CONTENT} ]] && FILE_CONTENT="_(no file content)_"
        else
            FILE_CONTENT="_(file not found)_"
        fi
    fi

    # Attempt to str_replace $FILE_CONTENT in text with file content
    text="$(eval printf ${text})"

    # Set empty text stub and json encode
    [[ -z ${text} ]] && text="_(missing text)_"
    text=$(echo "${text}" | jq -R -s .)

    # Remove tailing newline
    text=$(echo "${text}" | sed -E 's/\\n"$/"/')

    echo ${text}
}

cd ${1}

exec 3>&1
exec 1>&2

# for jq
PATH=/usr/locs/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > ${payload} <&0

silent=$(jq -r '.params.silent // "true"' < "${payload}")

api_url=$(jq -r '.source.url' < "${payload}")
username=$(jq -r '.source.username' < "${payload}")
password=$(jq -r '.source.password' < "${payload}")
project=$(jq -r '.source.project' < "${payload}")

issue_type=$(jq -r '.params.issue_type' < "${payload}")

summary=$(get_text "summary")
description=$(get_text "description")

custom_fields=$(jq -r '.params.custom_fields' < "${payload}")

create=$(cat <<EOF
    {
      "fields": {
        "project": {
          "key": "${project}"
        },
        "issuetype": {
          "name": "${issue_type}"
        },
        "summary": ${summary},
        "description": ${description},
        "environment": "PROD",
        "duedate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
        "customfield_10201": "none"
      }
    }
EOF
)

update=$(cat <<EOF
    {
      "fields": {

      }
    }
EOF
)

search=$(cat <<EOF
    {
        "jql": "project=${project} AND summary~\\"${summary//\"/}\\" ORDER BY id DESC",
        "maxResults": 1,
        "fields": [
            "key",
            "summary"
        ]
    }
EOF
)

create_curl="curl -u ${username}:${password} -X POST -H 'Content-Type: application/json' --data '#body#' ${api_url}/rest/api/2/issue/"
update_curl="curl -u ${username}:${password} -X PUT -H 'Content-Type: application/json' --data '#body#' ${api_url}/rest/api/2/issue/"
search_curl="curl -u ${username}:${password} -X POST -H 'Content-Type: application/json' --data '#search#' ${api_url}/rest/api/2/search/"

if [[ ${DEBUG} == "true" ]]
then
        json="$(cat <<EOF
{
  "curls": {
    "create": $(echo ${create_curl} | jq -R .),
    "update": $(echo ${update_curl} | jq -R .),
    "search": $(echo ${search_curl} | jq -R .)
  },
  "body": ${create},
  "search": ${search}
}
EOF
)"
    echo "$json"
    exit 0
fi

echo "Searching for existing issue ${summary}..."

search=$(echo ${search} | jq -c '.')
search_curl=$(echo ${search_curl} | sed "s/#search#/${search//\"/\\\"}/g")
search_result=$(eval "${search_curl} -s")

echo ${search_result} | jq .

create=$(echo ${create} | jq -c '.')
create_curl=$(echo ${create_curl} | sed "s/#body#/${create}/g")
update=$(echo ${update} | jq -c '.')
update_curl=$(echo ${update_curl} | sed "s/#body#/${update}/g")

if [[ $(echo ${search_result} | jq -r '.issues[0].fields.summary') == ${summary//\"/} ]]
then
    issue_key=$(echo ${search_result} | jq -r '.issues[0].key')

    echo "Issue exists: $issue_key - ${summary//\"/}"
    echo "Updating issue..."
    echo ${update} | jq .
    code="$(eval "${update_curl}${issue_key} -s --write-out %{http_code}")"
else
    echo "No existing issue."
    echo "Creating issue: ${summary//\"/} "
    echo ${create} | jq .
    response="{ \"res\":"$(eval "${create_curl} -s --write-out ',\"code\": %{http_code}'")"}"

    code=$(echo ${response} | jq -r '.code')
    response=$(echo ${response} | jq -r '.res')
fi

echo "-----------"
echo ${response}


if (( code < 200 || code > 299 ))
then
    echo ${response} | jq .
    echo ""
    echo "Try exploring the create metadata for your project if you're having trouble creating an issue: "
    echo "${api_url}/rest/api/2/issue/createmeta?projectKeys=${project}&expand=projects.issuetypes.fields"
    exit 1
elif [[ -z ${issue_key} ]]
then
    echo ${response} | jq .
    issue_key=$(echo ${response} | jq -r '.key')
fi

echo "-----------"
jq -n "{version:{issue:\"${issue_key}\"}}" >&3
